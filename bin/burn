#!/usr/bin/env ruby

$LOAD_PATH.unshift File.expand_path(File.dirname(__FILE__) + '/../lib')

require 'afterburn'
require 'optparse'

config = ENV['AFTERBURNCONFIG'] || './lib/afterburn/server/config/setup.rb'
load ::File.expand_path(config) if ::File.exists?(config)

parser = OptionParser.new do |opts|
  opts.banner = "Usage: burn [options] COMMAND"

  opts.separator ""
  opts.separator "Options:"

  # opts.on("-m", "--members", "List members") do |host|
  #   Resque.redis = host
  # end

  # opts.on("-N", "--namespace [NAMESPACE]", "Redis namespace") do |namespace|
  #   Resque.redis.namespace = namespace
  # end

  opts.on("-h", "--help", "Show this message") do
    puts opts
    exit
  end

  # opts.separator ""
  # opts.separator "Commands:"
  # opts.separator "  remove WORKER   Removes a worker"
  # opts.separator "  kill WORKER     Kills a worker"
  opts.separator "  list            List current members or projects"
end

# def kill(worker)
#   abort "** resque kill WORKER_ID" if worker.nil?
#   pid = worker.split(':')[1].to_i

#   begin
#     Process.kill("KILL", pid)
#     puts "** killed #{worker}"
#   rescue Errno::ESRCH
#     puts "** worker #{worker} not running"
#   end

#   remove worker
# end

# def remove(worker)
#   abort "** resque remove WORKER_ID" if worker.nil?

#   Resque.remove_worker(worker)
#   puts "** removed #{worker}"
# end

def list(method)
  if Afterburn.respond_to?("current_#{method}")
    collection = Afterburn.send("current_#{method}")
    
    if collection.any?
      collection.each do |item|
        puts item.name
      end
    else
      puts "None"
    end
  else
    puts "#{method} unknown"
  end
end

def record
  Afterburn.current_projects.map(&:record_interval)
end

parser.parse!

case ARGV[0]
# when 'kill'
#   kill ARGV[1]
# when 'remove'
#   remove ARGV[1]
when 'list'
  list ARGV[1]
when 'record'
  record
else
  puts parser.help
end
